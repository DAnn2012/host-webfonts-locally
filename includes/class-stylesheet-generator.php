<?php
defined('ABSPATH') || exit;

/* * * * * * * * * * * * * * * * * * * * *
 *
 *  ██████╗ ███╗   ███╗ ██████╗ ███████╗
 * ██╔═══██╗████╗ ████║██╔════╝ ██╔════╝
 * ██║   ██║██╔████╔██║██║  ███╗█████╗
 * ██║   ██║██║╚██╔╝██║██║   ██║██╔══╝
 * ╚██████╔╝██║ ╚═╝ ██║╚██████╔╝██║
 *  ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ ╚═╝
 *
 * @package  : OMGF
 * @author   : Daan van den Bergh
 * @copyright: © 2022 Daan van den Bergh
 * @url      : https://ffw.press
 * * * * * * * * * * * * * * * * * * * */

class OMGF_StylesheetGenerator
{
	/** @var $fonts */
	private $fonts;

	/** @var string $plugin */
	private $plugin;

	/**
	 * OMGF_GenerateStylesheet constructor.
	 */
	public function __construct(
		$fonts,
		string $plugin
	) {
		$this->fonts  = $fonts;
		$this->plugin = $plugin;
	}

	/**
	 * Generate a stylesheet based on the provided $fonts.
	 * 
	 * @return string 
	 */
	public function generate()
	{
		$font_display = OMGF_DISPLAY_OPTION;
		$stylesheet   = "/**\n * Auto Generated by $this->plugin\n * @author: Daan van den Bergh\n * @url: https://ffw.press\n */\n\n";

		foreach ($this->fonts as $font) {
			/**
			 * If Font Family's name was recently renamed, the old name should be used so no manual changes have to be made 
			 * to the stylesheet after processing.
			 */
			$renamed_font_family = in_array($font->id, OMGF_Optimize::OMGF_RENAMED_GOOGLE_FONTS)
				? array_search($font->id, OMGF_Optimize::OMGF_RENAMED_GOOGLE_FONTS)
				: '';

			foreach ($font->variants as $variant) {
				/**
				 * Filter font_family name. 
				 * 
				 * @since v4.5.1
				 */
				$font_family = apply_filters('omgf_generate_stylesheet_font_family', $renamed_font_family ? ucfirst(rawurldecode($renamed_font_family)) : rawurldecode($variant->fontFamily));
				$font_style  = $variant->fontStyle;
				$font_weight = $variant->fontWeight;
				$stylesheet .= "@font-face {\n";
				$stylesheet .= "    font-family: '$font_family';\n";
				$stylesheet .= "    font-style: $font_style;\n";
				$stylesheet .= "    font-weight: $font_weight;\n";
				$stylesheet .= "    font-display: $font_display;\n";
				$stylesheet  .= "   src: " . $this->build_source_string(['woff2' => $variant->woff2]) . "\n";

				if (isset($variant->range)) {
					$stylesheet .= "    unicode-range: $variant->range;\n";
				}

				$stylesheet .= "}\n";
			}
		}

		return $stylesheet;
	}

	/**
	 * @param        $sources
	 * @param string $type
	 * @param bool   $end_semi_colon
	 *
	 * @return string
	 */
	private function build_source_string($sources, $type = 'url', $end_semi_colon = true)
	{
		$last_src = end($sources);
		$source   = '';

		foreach ($sources as $format => $url) {
			$source .= "    $type('$url')" . (!is_numeric($format) ? " format('$format')" : '');

			if ($url === $last_src && $end_semi_colon) {
				$source .= ";\n";
			} else {
				$source .= ",\n";
			}
		}

		return $source;
	}
}
